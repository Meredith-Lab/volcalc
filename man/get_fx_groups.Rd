% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_fx_groups.R
\name{get_fx_groups}
\alias{get_fx_groups}
\title{Count compound functional groups}
\usage{
get_fx_groups(compound_sdf, validate = TRUE)
}
\arguments{
\item{compound_sdf}{a \link[ChemmineR:SDFset-class]{ChemmineR::SDFset} object returned by
\code{\link[ChemmineR:read.SDFset]{ChemmineR::read.SDFset()}} or \code{\link[ChemmineR:smiles2sdf]{ChemmineR::smiles2sdf()}}, for example.}

\item{validate}{logical; if \code{TRUE} (default), results are checked for
possible errors in parsing by Open Babel and \code{NA}s are returned if possible
errors are found.  Setting to \code{FALSE} bypasses these checksâ€”use at your own
risk, as OpenBabel errors cannot be captured!}
}
\value{
A tibble with columns of basic compound info and functional group
counts.
}
\description{
Returns functional group counts relevant to calculating estimated volatility
for specified compounds. Users will not typically interact with this function
directly, but rather by using \code{\link[=calc_vol]{calc_vol()}}.
}
\details{
It is unfortunately difficult to capture errors and warnings produced by the
command line tool OpenBabel.  These errors and warnings are printed to the R
console, but they are \emph{not} R errors and do not stop code from running and
producing potentially incorrect data. \code{validate = TRUE} checks the output of
certain \code{ChemmineR} functions for the \emph{symptoms} of parsing errors, namely
missing values for InChI and molecular formula.
}
\note{
This function currently does \strong{not} capture the carbon number on the
acid-side of amide, one of the functional groups used in SIMPOL.1.
Contributions of SMARTS strings or other methods to capture this
"functional group" are welcome.
}
\examples{
mol_path <- mol_example()[1]
sdf <- ChemmineR::read.SDFset(mol_path)
get_fx_groups(sdf)

}
\seealso{
\code{\link[=calc_vol]{calc_vol()}}
}
