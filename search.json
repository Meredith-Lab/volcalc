[{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement kristinariemer@arizona.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://meredith-lab.github.io/volcalc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 volcalc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://meredith-lab.github.io/volcalc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kristina Riemer. Author, maintainer, copyright holder. Eric R. Scott. Author.","code":""},{"path":"https://meredith-lab.github.io/volcalc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemer K, Scott E (2023). volcalc: Calculate Volatility Chemical Compounds. doi:10.5281/zenodo.8015155, R package version 2.0.0. Meredith L, Riemer K, Geffre P, Honeker L, Krechmer J, Graves K, Tfaily M, Ledford S (review). “Automating methods estimating metabolite volatility.” Frontiers Microbiology.","code":"@Manual{,   title = {volcalc: Calculate Volatility of Chemical Compounds},   author = {Kristina Riemer and Eric R. Scott},   year = {2023},   note = {R package version 2.0.0},   doi = {10.5281/zenodo.8015155}, } @Article{,   title = {Automating methods for estimating metabolite volatility},   author = {LK Meredith and Kristina Riemer and P Geffre and L Honeker and J Krechmer and K Graves and M Tfaily and SK Ledford},   year = {in review},   journal = {Frontiers in Microbiology}, }"},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Calculate Volatility of Chemical Compounds","text":"goal volcalc automate calculating estimates volatility chemical compounds. [!WARNING] volcalc work progress—use risk! still stage development likely introduce many breaking changes. bit road map development headed, see proposal R Consortium grant. Volatility can estimated chemical compounds using .mol file. KEGG database provides .mol files compounds can downloaded using just KEGG unique identifier compound interest. Alternatively, volatility can estimated multiple compounds KEGG pathway. Volatility estimation done using modified version SIMPOL.1 method (Pankow & Asher 2008).","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"using-without-installing","dir":"","previous_headings":"Installation","what":"Using without installing","title":"Calculate Volatility of Chemical Compounds","text":"can use volcalc package using RStudio server . instance can slow launch. instance generated using Binder, excellent free, open source tool create custom computing environments. see example use volcalc, run script example_volcalc_usage.R included server’s file system.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"installing-locally","dir":"","previous_headings":"Installation","what":"Installing locally","title":"Calculate Volatility of Chemical Compounds","text":"can install development version volcalc GitHub r-universe can install ‘legacy’ version used -prep publication Installation volcalc requires system libraries OpenBabel Eigen3 (requirements ChemmineOB package, volcalc depends ). pak take care installation libraries systems, may need install manually. macOS, can installed via homebrew running following shell command: Ubuntu Linux: windows, OpenBabel included ChemmineOB binary need installed separately. installation options see OpenBabel documentation ChemmineOB install guide","code":"# install.packages(\"pak\") pak::pkg_install(\"Meredith-Lab/volcalc\") options(repos = c('https://cct-datascience.r-universe.dev', 'https://cloud.r-project.org')) pak::pkg_install('volcalc') pak::pkg_install(\"Meredith-Lab/volcalc@v1.0.2\") brew install open-babel sudo apt-get install libopenbabel-dev sudo apt-get install libeigen3-dev"},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"loading-package","dir":"","previous_headings":"Installation","what":"Loading package","title":"Calculate Volatility of Chemical Compounds","text":"Use package :","code":"library(volcalc)"},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"single-compound-usage","dir":"","previous_headings":"","what":"Single compound usage","title":"Calculate Volatility of Chemical Compounds","text":"basic example shows get estimated relative volatility index (rvi) example compound beta-2,3,4,5,6-Pentachlorocyclohexanol. KEGG compound identifier compound, found compound’s KEGG page, C16181.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"single-function-approach","dir":"","previous_headings":"Single compound usage","what":"Single function approach","title":"Calculate Volatility of Chemical Compounds","text":"returns dataframe columns specifying general info compound, compound’s calculated volatility corresponding volatility category. functional group counts underlying volatility can additionally returned return_fx_groups = TRUE, intermediate calculation steps return_calc_steps = TRUE.","code":"out_path <- tempdir() # download a .mol file from KEGG files <- get_mol_kegg(\"C16181\", dir = out_path) calc_vol(files$mol_path) #> # A tibble: 1 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <chr>    #> 1 /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T… C6H7Cl… beta…  6.98 high"},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Calculate Volatility of Chemical Compounds","text":"Please note volcalc project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"Calculate Volatility of Chemical Compounds","text":"appreciate many kinds feedback contributions R package. find bug, interested additional feature, made improvements package want share, feel free file issue GitHub repo.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"how-to-cite","dir":"","previous_headings":"","what":"How to cite","title":"Calculate Volatility of Chemical Compounds","text":"use package published work, please cite using reference : Meredith, L.K., Riemer, K., Geffre, P., Honeker, L., Krechmer, J., Graves, K., Tfaily, M., Ledford, S.K. Automating methods estimating metabolite volatility. review.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"references","dir":"","previous_headings":"How to cite","what":"References","title":"Calculate Volatility of Chemical Compounds","text":"Pankow, J.F., Asher, W.E., 2008. SIMPOL.1: simple group contribution method predicting vapor pressures enthalpies vaporization multifunctional organic compounds. Atmos. Chem. Phys. https://doi.org/10.5194/acp-8-2773-2008","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate volatility estimate for a compound — calc_vol","title":"Calculate volatility estimate for a compound — calc_vol","text":"Relative volatility value category estimated specified compound using group contribution methods.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate volatility estimate for a compound — calc_vol","text":"","code":"calc_vol(   input,   from = c(\"mol_path\"),   method = c(\"simpol1\"),   return_fx_groups = FALSE,   return_calc_steps = FALSE )"},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate volatility estimate for a compound — calc_vol","text":"input path .mol file character representation SMILES InChI form input (currently path .mol file implemented) method method calculating estimated volatility. Currently SIMPOL.1 method implemented---see simpol1() details. return_fx_groups TRUE, includes functional group counts final dataframe. return_calc_steps TRUE, includes intermediate volatility calculation steps final dataframe. See Details","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate volatility estimate for a compound — calc_vol","text":"tibble relative volatility index (rvi) volatility category (category).","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate volatility estimate for a compound — calc_vol","text":"\\(\\textrm{log}_{10}C^\\ast\\) used calculated relative volatility index (rvi). \\(\\textrm{log}_{10}C^\\ast =   \\textrm{log}_{10}(PM/RT)\\) \\(P\\) estimated vapor pressure compound, \\(M\\) molecular mass compound, \\(R\\) universal gas constant, \\(T\\) temperature (293.14K 20ºC).  return_calc_steps = TRUE, log estimated vapor pressure, log10_P, \\(\\textrm{log}_{10}(M/RT)\\), log_alpha, also returned.","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate volatility estimate for a compound — calc_vol","text":"","code":"mol_path <- mol_example(\"C16181.mol\") calc_vol(mol_path) #> # A tibble: 1 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <chr>    #> 1 /home/runner/work/_temp/Library/volcalc/extdata/… C6H7Cl… NA     6.98 high      # Return functional group counts from get_fx_groups() calc_vol(mol_path,  return_fx_groups = TRUE) #> # A tibble: 1 × 47 #>   mol_path formula name    rvi category carbons carbons_asa rings_aromatic rings #>   <chr>    <chr>   <chr> <dbl> <chr>      <int>       <int>          <int> <int> #> 1 /home/r… C6H7Cl… NA     6.98 high           6           0              0     1 #> # ℹ 38 more variables: carbon_dbl_bonds <dbl>, CCCO_aliphatic_ring <int>, #> #   hydroxyl_groups <int>, aldehydes <int>, ketones <int>, carbox_acids <int>, #> #   ester <int>, ether <int>, ether_alicyclic <int>, ether_aromatic <int>, #> #   nitrate <int>, nitro <int>, hydroxyl_aromatic <int>, amine_primary <int>, #> #   amine_secondary <int>, amine_tertiary <int>, amine_aromatic <int>, #> #   amides <int>, carbonylperoxynitrate <int>, peroxide <int>, #> #   hydroperoxide <int>, carbonylperoxyacid <int>, nitrophenol <int>, …  # Return intermediate calculations calc_vol(mol_path, return_calc_steps = TRUE) #> # A tibble: 1 × 8 #>   mol_path                  formula name    rvi category  mass log_alpha log10_P #>   <chr>                     <chr>   <chr> <dbl> <chr>    <dbl>     <dbl>   <dbl> #> 1 /home/runner/work/_temp/… C6H7Cl… NA     6.98 high      272.      10.1   -3.08"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Count compound functional groups — get_fx_groups","title":"Count compound functional groups — get_fx_groups","text":"Returns functional group counts relevant calculating estimated volatility specified compounds. Users typically interact function directly, rather using calc_vol().","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count compound functional groups — get_fx_groups","text":"","code":"get_fx_groups(compound_sdf)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count compound functional groups — get_fx_groups","text":"compound_sdf ChemmineR::SDFset object returned ChemmineR::read.SDFset() ChemmineR::smiles2sdf(), example.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count compound functional groups — get_fx_groups","text":"tibble columns basic compound info functional group counts.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Count compound functional groups — get_fx_groups","text":"function currently capture following functional groups used SIMPOL.1: carbon number acid-side amide C=C-C=O non-aromatic ring alicyclic ether aromatic ether aromatic amine carbonylperoxynitrate hydroperoxide carbonylperoxyacid nitrophenol, nitroesther Contributions SMARTS strings capture groups welcome.","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count compound functional groups — get_fx_groups","text":"","code":"mol_path <- mol_example(\"C16181.mol\") sdf <- ChemmineR::read.SDFset(mol_path) fx_groups <- get_fx_groups(sdf)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":null,"dir":"Reference","previous_headings":"","what":"Download compound .mol files from KEGG — get_mol_kegg","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"Downloads mol files corresponding individual compounds compounds pathway KEGG.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"","code":"get_mol_kegg(compound_ids, pathway_ids, dir)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"compound_ids character vector KEGG compound IDs---5 digits prepended \"C\". pathway_ids character vector KEGG pathway IDs---5 digits prepended \"map\". dir path folder save .mol files . Folder created already exist","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"tibble columns compound_ids, pathway_ids (used), mol_paths (paths downloaded .mol files)","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"","code":"if (FALSE) { get_mol_kegg(compound_ids = c(\"C16181\", \"C06074\"), dir = tempdir()) get_mol_kegg(pathway_ids = \"map00253\", dir = tempdir()) }"},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to example .mol file — mol_example","title":"Get path to example .mol file — mol_example","text":"volcalc comes bundled example .mol files inst/extdata directory.  function provides easy access .","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to example .mol file — mol_example","text":"","code":"mol_example(path = NULL)"},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to example .mol file — mol_example","text":"path Name file.  NULL (default), options example .mol files listed instead.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to example .mol file — mol_example","text":"","code":"#list all examples mol_example() #> [1] \"C00011.mol\" \"C00042.mol\" \"C16181.mol\"  #return path to specific example file mol_example(\"C16181.mol\") #> [1] \"/home/runner/work/_temp/Library/volcalc/extdata/C16181.mol\""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPOL.1 method for calculating estimated volatility — simpol1","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"Implements SIMPOL.1 group contribution method predicting liquid vapor pressure organic compounds described Pankow & Asher (2008).  Users usually use function directly, rather calc_vol() uses default (currently ) method.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"","code":"simpol1(fx_groups)"},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"fx_groups data.frame tibble counts functional groups produced get_fx_groups() (manually, column names)","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"fx_groups tibble additional log10_P column","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"output includes column log10_P \\(\\textrm{log}_{10} P_{\\textrm{L},}^\\circ(T) = \\sum_k\\nu_{k,}b_k(T)\\), sum counts functional groups (\\(\\nu_{k,}\\)) times coefficients functional group (\\(b_K(T)\\)). Units log10 atmospheres.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"method described Pankow & Asher (2008) allows calculations logP different temperatures.  implementation currently calculates values 20ºC.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"Pankow, J.F., Asher, W.E., 2008. SIMPOL.1: simple group contribution method predicting vapor pressures enthalpies vaporization multifunctional organic compounds. Atmos. Chem. Phys. https://doi.org/10.5194/acp-8-2773-2008","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"","code":"mol_path <- mol_example(\"C16181.mol\") sdf <- ChemmineR::read.SDFset(mol_path) fx_groups <- get_fx_groups(sdf) simpol1(fx_groups) #> # A tibble: 1 × 46 #>   formula  name   mass carbons carbons_asa rings_aromatic rings carbon_dbl_bonds #>   <chr>    <chr> <dbl>   <int>       <int>          <int> <int>            <dbl> #> 1 C6H7Cl5O NA     272.       6           0              0     1                0 #> # ℹ 38 more variables: CCCO_aliphatic_ring <int>, hydroxyl_groups <int>, #> #   aldehydes <int>, ketones <int>, carbox_acids <int>, ester <int>, #> #   ether <int>, ether_alicyclic <int>, ether_aromatic <int>, nitrate <int>, #> #   nitro <int>, hydroxyl_aromatic <int>, amine_primary <int>, #> #   amine_secondary <int>, amine_tertiary <int>, amine_aromatic <int>, #> #   amides <int>, carbonylperoxynitrate <int>, peroxide <int>, #> #   hydroperoxide <int>, carbonylperoxyacid <int>, nitrophenol <int>, …"},{"path":"https://meredith-lab.github.io/volcalc/reference/volcalc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","title":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","text":"Use package calculate estimated relative volatility index values organic compounds based functional group contributions. Calculation uses SIMPOL method (Prankow Asher, 2008).","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/volcalc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","text":"Maintainer: Kristina Riemer kristinariemer@arizona.edu (ORCID) [copyright holder] Authors: Eric R. Scott (ORCID)","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-200","dir":"Changelog","previous_headings":"","what":"volcalc 2.0.0","title":"volcalc 2.0.0","text":"version includes big (breaking) changes package works! Please read changelog carefully check function documentation examples see new usage functions. Change output get_fx_groups() calc_vol() data frame tibble get_fx_groups() calc_vol() longer depend KEGG take KEGG compound IDs pathway IDs. Instead, calc_vol() accepts path .mol file input. calc_vol() vectorized accepts multiple compounds input. Moved SIMPOL.1 calculations calc_vol() function, simpol1(), pave way future expansions using methods. “manual” workflow now .mol file |> ChemmineR::read.SDFset() |> get_fx_groups() |> simpol1() output calc_vol() (simpol1()) now contains column called log10_P instead log_Sum, equivalent log_Sum + coefficient b_0(T) Output calc_vol() now contains column inputs, named whatever supplied (eg. column called mol_path containing paths mol files) new function, get_mol_kegg(), replaces save_compound_mol() downloading mol files KEGG Added pkgdown website get_fx_groups() now counts smallest set smallest rings (#57) Fixed bug caused number phenols miscounted. Rather counting phenols, get_fx_groups now counts aromatic hydroxyl groups (e.g. phenols) closely align Pankow & Asher (2008) (#46) package now hex logo! Fixes bug volcalc introduced bug-fix ChemmineR v3.53.1 (#54) volatility column output calc_vol() renamed rvi (relative volatility index)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-102","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.2","title":"volcalc 1.0.2","text":"Minor change calculation calc_vol()—remove amines functional group avoid double counting primary amines (#49)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-101","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.1","title":"volcalc 1.0.1","text":"Minor change calculation calc_vol()—use 293.15K temperature (instead 293K) match temperature used Pankow & Asher (2008)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-100","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.0","title":"volcalc 1.0.0","text":"Initial release volcalc. version code used -prep manuscript. Version 2.0.0 include breaking changes","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-0009000","dir":"Changelog","previous_headings":"","what":"volcalc 0.0.0.9000","title":"volcalc 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
