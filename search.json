[{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement kristinariemer@arizona.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://meredith-lab.github.io/volcalc/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://meredith-lab.github.io/volcalc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 volcalc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://meredith-lab.github.io/volcalc/articles/kegg.html","id":"single-compound-usage","dir":"Articles","previous_headings":"","what":"Single compound usage","title":"Downloading from KEGG","text":"can search KEGG compunds https://www.genome.jp/kegg/compound/ find KEGG IDs starting “C”. Let’s download .mol files two compounds, jasmonic acid methyl jasmonate, KEGG IDs C08491 C11512, respectively, using volcalc function get_mol_kegg(). data frame returned get_mol_kegg() contains paths files downloaded mol_path, making convenient passage volcalc function calc_vol(). calc_vol() also returns file paths, two data frames can easily joined.","code":"mols <- get_mol_kegg(compound_ids = c(\"C08491\", \"C11512\"), dir = dl_path) mols #> # A tibble: 2 × 2 #>   compound_id mol_path                                                               #>   <chr>       <fs::path>                                                             #> 1 C08491      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/C08491.mol #> 2 C11512      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/C11512.mol rvi <- calc_vol(mols$mol_path) rvi #> # A tibble: 2 × 5 #>   mol_path                                                               formula  name      rvi category #>   <chr>                                                                  <chr>    <chr>   <dbl> <fct>    #> 1 /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/C08491.mol C12H18O3 (-)-Ja…  1.84 moderate #> 2 /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/C11512.mol C13H20O3 Methyl…  3.10 high left_join(mols, rvi, by = join_by(mol_path)) %>%   select(-mol_path) #> # A tibble: 2 × 5 #>   compound_id formula  name                rvi category #>   <chr>       <chr>    <chr>             <dbl> <fct>    #> 1 C08491      C12H18O3 (-)-Jasmonic acid  1.84 moderate #> 2 C11512      C13H20O3 Methyl jasmonate   3.10 high"},{"path":"https://meredith-lab.github.io/volcalc/articles/kegg.html","id":"pathway-usage","dir":"Articles","previous_headings":"","what":"Pathway usage","title":"Downloading from KEGG","text":"can download single multiple compounds compound_ids, can also download compounds associated KEGG pathway pathway_ids. Let’s download entire alpha-linolenic acid metabolism pathway (map00592) two compounds part . Notice returns pathway IDs compound IDs. can pass mol_path column calc_vol() join resulting data frame basic data wrangling find top 10 volatile compounds pathway.","code":"alam_pathway <- get_mol_kegg(pathway_ids = \"map00592\", dir = dl_path) head(alam_pathway) #> # A tibble: 6 × 3 #>   pathway_id compound_id mol_path                                                                        #>   <chr>      <chr>       <fs::path>                                                                      #> 1 map00592   C00157      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C00157.mol #> 2 map00592   C01226      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C01226.mol #> 3 map00592   C04672      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C04672.mol #> 4 map00592   C04780      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C04780.mol #> 5 map00592   C04785      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C04785.mol #> 6 map00592   C06427      /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpIdIFDx/map00592/C06427.mol dim(alam_pathway) #> [1] 44  3 rvi_path <- calc_vol(alam_pathway$mol_path) left_join(alam_pathway, rvi_path, by = join_by(mol_path)) %>%    select(-mol_path) %>%    #arrange from most to least volatile   arrange(desc(rvi)) %>%    #take just the top 10   slice_head(n = 10) #> # A tibble: 10 × 6 #>    pathway_id compound_id formula  name                         rvi category #>    <chr>      <chr>       <chr>    <chr>                      <dbl> <fct>    #>  1 map00592   C16310      C6H10O   3-Hexenal                   7.32 high     #>  2 map00592   C08492      C6H12O   3-Hexenol                   6.45 high     #>  3 map00592   C16323      C9H14O   3,6-Nonadienal              6.05 high     #>  4 map00592   C19757      C8H14O2  (3Z)-Hex-3-en-1-yl acetate  6.03 high     #>  5 map00592   C11512      C13H20O3 Methyl jasmonate            3.10 high     #>  6 map00592   C16318      C13H20O3 (+)-7-Isomethyljasmonate    3.10 high     #>  7 map00592   C16322      C9H16O3  9-Oxononanoic acid          2.77 high     #>  8 map00592   C16343      C17H28O  Heptadecatrienal            2.69 high     #>  9 map00592   C08491      C12H18O3 (-)-Jasmonic acid           1.84 moderate #> 10 map00592   C16317      C12H18O3 (+)-7-Isojasmonic acid      1.84 moderate"},{"path":"https://meredith-lab.github.io/volcalc/articles/volcalc.html","id":"basic-usage-with--mol-files","dir":"Articles","previous_headings":"","what":"Basic usage with .mol files","title":"Introduction to volcalc","text":"default output calc_vol() includes relative volatility index, rvi equivalent \\(\\textrm{log}_{10}C^\\ast\\). also includes RVI category clean air.","code":"#using built-in example .mol files mol_paths <- mol_example() mol_paths #> [1] \"/home/runner/work/_temp/Library/volcalc/extdata/C00031.mol\" #> [2] \"/home/runner/work/_temp/Library/volcalc/extdata/C08491.mol\" #> [3] \"/home/runner/work/_temp/Library/volcalc/extdata/C16181.mol\" #> [4] \"/home/runner/work/_temp/Library/volcalc/extdata/C16286.mol\" #> [5] \"/home/runner/work/_temp/Library/volcalc/extdata/C16521.mol\" calc_vol(mol_paths) #> # A tibble: 5 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <fct>    #> 1 /home/runner/work/_temp/Library/volcalc/extdata/… C6H12O6 D-Gl… -20.3 non-vol… #> 2 /home/runner/work/_temp/Library/volcalc/extdata/… C12H18… (-)-… -20.3 non-vol… #> 3 /home/runner/work/_temp/Library/volcalc/extdata/… C6H7Cl… beta… -20.2 non-vol… #> 4 /home/runner/work/_temp/Library/volcalc/extdata/… C12H22O Geos… -20.3 non-vol… #> 5 /home/runner/work/_temp/Library/volcalc/extdata/… C5H8    Isop… -20.8 non-vol…"},{"path":"https://meredith-lab.github.io/volcalc/articles/volcalc.html","id":"specify-environment","dir":"Articles","previous_headings":"","what":"Specify environment","title":"Introduction to volcalc","text":"Specifying environment alters RVI category using different RVI cutoffs non-volatile, low, moderate, high volatility. Environment options category cutoffs calc_vol() documentation.","code":"calc_vol(mol_paths, environment = \"soil\") #> # A tibble: 5 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <fct>    #> 1 /home/runner/work/_temp/Library/volcalc/extdata/… C6H12O6 D-Gl… -20.3 non-vol… #> 2 /home/runner/work/_temp/Library/volcalc/extdata/… C12H18… (-)-… -20.3 non-vol… #> 3 /home/runner/work/_temp/Library/volcalc/extdata/… C6H7Cl… beta… -20.2 non-vol… #> 4 /home/runner/work/_temp/Library/volcalc/extdata/… C12H22O Geos… -20.3 non-vol… #> 5 /home/runner/work/_temp/Library/volcalc/extdata/… C5H8    Isop… -20.8 non-vol…"},{"path":"https://meredith-lab.github.io/volcalc/articles/volcalc.html","id":"return-intermediate-steps","dir":"Articles","previous_headings":"","what":"Return intermediate steps","title":"Introduction to volcalc","text":"calc_vol() uses modified version SIMPOL.1 method default group contribution method. can calc_vol() return counts functional groups molecular properties (useful validation) return_fx_groups = TRUE. See ?get_fx_groups() information additional columns. SIMPOL.1 method calculates \\(\\textrm{log}_{10} P_{\\textrm{L},}^\\circ(T)\\), used calc_vol() calculate RVI. see intermediate calculations, use return_calc_steps = TRUE.","code":"calc_vol(mol_paths, return_fx_groups = TRUE) #> # A tibble: 5 × 51 #>   mol_path           formula name    rvi category exact_mass carbons carbons_asa #>   <chr>              <chr>   <chr> <dbl> <fct>         <dbl>   <int>       <int> #> 1 /home/runner/work… C6H12O6 D-Gl… -20.3 non-vol…      180.        6           0 #> 2 /home/runner/work… C12H18… (-)-… -20.3 non-vol…      210.       12           0 #> 3 /home/runner/work… C6H7Cl… beta… -20.2 non-vol…      270.        6           0 #> 4 /home/runner/work… C12H22O Geos… -20.3 non-vol…      182.       12           0 #> 5 /home/runner/work… C5H8    Isop… -20.8 non-vol…       68.1       5           0 #> # ℹ 43 more variables: rings_aromatic <dbl>, rings <dbl>, #> #   carbon_dbl_bonds <dbl>, CCCO_aliphatic_ring <int>, hydroxyl_groups <int>, #> #   aldehydes <int>, ketones <int>, carbox_acids <int>, ester <int>, #> #   ether <int>, ether_alicyclic <int>, ether_aromatic <int>, nitrate <int>, #> #   nitro <int>, hydroxyl_aromatic <int>, amine_primary <int>, #> #   amine_secondary <int>, amine_tertiary <int>, amine_aromatic <int>, #> #   amide_total <int>, amide_primary <int>, amide_secondary <int>, … calc_vol(mol_paths, return_calc_steps = TRUE) #> # A tibble: 5 × 8 #>   mol_path       formula name    rvi category molecular_weight log_alpha log10_P #>   <chr>          <chr>   <chr> <dbl> <fct>               <dbl>     <dbl>   <dbl> #> 1 /home/runner/… C6H12O6 D-Gl… -20.3 non-vol…            180.       9.87   -30.2 #> 2 /home/runner/… C12H18… (-)-… -20.3 non-vol…            210.       9.94   -30.2 #> 3 /home/runner/… C6H7Cl… beta… -20.2 non-vol…            272.      10.1    -30.2 #> 4 /home/runner/… C12H22O Geos… -20.3 non-vol…            182.       9.88   -30.2 #> 5 /home/runner/… C5H8    Isop… -20.8 non-vol…             68.1      9.45   -30.2"},{"path":"https://meredith-lab.github.io/volcalc/articles/volcalc.html","id":"use-with-smiles","dir":"Articles","previous_headings":"","what":"Use with SMILES","title":"Introduction to volcalc","text":"Finally, can done using SMILES strings rather .mol files = \"smiles\". Backslash, \\ valid SMILES character, isn’t valid character R must “escaped” \\\\.","code":"## This will error even though the SMILES is correct # calc_vol(\"CC/C=C\\C[C@@H]1[C@H](CCC1=O)CC(=O)O\", from = \"smiles\")  # To solve this, escape \\C as \\\\C calc_vol(\"CC/C=C\\\\C[C@@H]1[C@H](CCC1=O)CC(=O)O\", from = \"smiles\") #> # A tibble: 1 × 5 #>   smiles                                 formula  name    rvi category #>   <chr>                                  <chr>    <chr> <dbl> <fct>    #> 1 \"CC/C=C\\\\C[C@@H]1[C@H](CCC1=O)CC(=O)O\" C12H18O3 NA     1.84 moderate"},{"path":"https://meredith-lab.github.io/volcalc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kristina Riemer. Author, maintainer, copyright holder. Eric R. Scott. Author.","code":""},{"path":"https://meredith-lab.github.io/volcalc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemer K, Scott E (2023). volcalc: Calculate Volatility Chemical Compounds. doi:10.5281/zenodo.8015155, R package version 2.0.0. Meredith L, Ledford S, Riemer K, Geffre P, Graves K, Honeker L, LeBauer D, Tfaily M, Krechmer J (2023). “Automating methods estimating metabolite volatility.” Frontiers Microbiology. doi:10.3389/fmicb.2023.1267234.","code":"@Manual{,   title = {volcalc: Calculate Volatility of Chemical Compounds},   author = {Kristina Riemer and Eric R. Scott},   year = {2023},   note = {R package version 2.0.0},   doi = {10.5281/zenodo.8015155}, } @Article{,   title = {Automating methods for estimating metabolite volatility},   author = {LK Meredith and SK Ledford and Kristina Riemer and P Geffre and K Graves and L Honeker and D LeBauer and M Tfaily and J Krechmer},   year = {2023},   doi = {10.3389/fmicb.2023.1267234},   journal = {Frontiers in Microbiology}, }"},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Calculate Volatility of Chemical Compounds","text":"volcalc package allows automate calculating estimates volatility chemical compounds. [!WARNING] volcalc work progress—use risk! bit road map development headed, see proposal R Consortium grant. volcalc designed support “group contribution” methods estimating volatility rely molecular properties molecular weight, numbers certain atoms, counts certain functional groups. Currently, methods implemented SIMPOL.1 (Pankow & Asher 2008) modified version used Meredith et al. (review). volcalc works either .mol files SMILES strings input, supports downloading .mol files directly KEGG.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Volatility of Chemical Compounds","text":"can install development version volcalc GitHub r-universe can install ‘legacy’ version used Meredith et al. (2023) Installation volcalc requires system libraries OpenBabel Eigen3 (requirements ChemmineOB package, volcalc depends ). pak take care installation libraries systems, may need install manually. macOS, can installed via homebrew running following shell command: Ubuntu Linux: windows, OpenBabel included ChemmineOB binary need installed separately. installation options see OpenBabel documentation ChemmineOB install guide","code":"# install.packages(\"pak\") pak::pkg_install(\"Meredith-Lab/volcalc\") install.packages(\"volcalc\", repos = c(\"https://cct-datascience.r-universe.dev\", getOption(\"repos\"))) pak::pkg_install(\"Meredith-Lab/volcalc@v1.0.2\") brew install open-babel sudo apt-get install libopenbabel-dev sudo apt-get install libeigen3-dev"},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Calculate Volatility of Chemical Compounds","text":"basic example shows get estimated relative volatility index (rvi) two example compounds beta-2,3,4,5,6-Pentachlorocyclohexanol, Succinate. KEGG compound identifiers compounds, found compound’s KEGG page, C16181, C00042. returns dataframe columns specifying general info compound, compound’s calculated volatility corresponding volatility category. functional group counts underlying volatility can additionally returned return_fx_groups = TRUE, intermediate calculation steps return_calc_steps = TRUE.","code":"library(volcalc) out_path <- tempdir() # download a .mol file from KEGG files <- get_mol_kegg(c(\"C16181\", \"C00042\"), dir = out_path) calc_vol(files$mol_path) #> # A tibble: 2 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <fct>    #> 1 /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T… C6H7Cl… beta…  6.98 high     #> 2 /var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T… C4H6O4  Succ…  2.57 high  #alternatively, supply a SMILES representation calc_vol(c(\"C1(C(C(C(C(C1Cl)Cl)Cl)Cl)Cl)O\",  \"C(CC(=O)O)C(=O)O\"), from = \"smiles\") #> # A tibble: 2 × 5 #>   smiles                        formula  name    rvi category #>   <chr>                         <chr>    <chr> <dbl> <fct>    #> 1 C1(C(C(C(C(C1Cl)Cl)Cl)Cl)Cl)O C6H7Cl5O <NA>   6.98 high     #> 2 C(CC(=O)O)C(=O)O              C4H6O4   <NA>   2.57 high"},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Calculate Volatility of Chemical Compounds","text":"Please note volcalc project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"Calculate Volatility of Chemical Compounds","text":"appreciate many kinds feedback contributions R package. find bug, interested additional feature, made improvements package want share, feel free file issue GitHub repo.","code":""},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"how-to-cite","dir":"","previous_headings":"","what":"How to cite","title":"Calculate Volatility of Chemical Compounds","text":"use package published work, please cite using reference :","code":"citation(\"volcalc\") #> To cite volcalc in publications please use: #>  #>   Riemer K, Scott E (2023). _volcalc: Calculate Volatility of Chemical #>   Compounds_. doi:10.5281/zenodo.8015155 #>   <https://doi.org/10.5281/zenodo.8015155>, R package version 2.0.0. #>  #> Please also cite the related manuscript: #>  #>   Meredith L, Ledford S, Riemer K, Geffre P, Graves K, Honeker L, #>   LeBauer D, Tfaily M, Krechmer J (2023). \"Automating methods for #>   estimating metabolite volatility.\" _Frontiers in Microbiology_. #>   doi:10.3389/fmicb.2023.1267234 #>   <https://doi.org/10.3389/fmicb.2023.1267234>. #>  #> To see these entries in BibTeX format, use 'print(<citation>, #> bibtex=TRUE)', 'toBibtex(.)', or set #> 'options(citation.bibtex.max=999)'."},{"path":"https://meredith-lab.github.io/volcalc/index.html","id":"references","dir":"","previous_headings":"How to cite","what":"References","title":"Calculate Volatility of Chemical Compounds","text":"Pankow, J.F., Asher, W.E., 2008. SIMPOL.1: simple group contribution method predicting vapor pressures enthalpies vaporization multifunctional organic compounds. Atmos. Chem. Phys. https://doi.org/10.5194/acp-8-2773-2008","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate volatility estimate for a compound — calc_vol","title":"Calculate volatility estimate for a compound — calc_vol","text":"Relative volatility value category estimated specified compound using group contribution methods.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate volatility estimate for a compound — calc_vol","text":"","code":"calc_vol(   input,   from = c(\"mol_path\", \"smiles\"),   method = c(\"meredith\", \"simpol1\"),   environment = c(\"clean\", \"polluted\", \"soil\"),   return_fx_groups = FALSE,   return_calc_steps = FALSE )"},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate volatility estimate for a compound — calc_vol","text":"input path .mol file SMILES string. form input. Either \"mol_path\" \"smiles\" (default \"mol_path\"). method method calculating estimated volatility. See simpol1() details. environment environment calculating relative volatility categories. RVI thresholds low, moderate, high volatility follows: \"clean\" (clean atmosphere, default) -2, 0, 2; \"polluted\" (polluted atmosphere) 0, 2, 4; \"soil\" 4, 6, 8. return_fx_groups TRUE, includes functional group counts final dataframe. return_calc_steps TRUE, includes intermediate volatility calculation steps final dataframe. See Details.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate volatility estimate for a compound — calc_vol","text":"tibble relative volatility index (rvi) volatility category (category).","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate volatility estimate for a compound — calc_vol","text":"\\(\\textrm{log}_{10}C^\\ast\\) used calculated relative volatility index (rvi). \\(\\textrm{log}_{10}C^\\ast =   \\textrm{log}_{10}(PM/RT)\\) \\(P\\) estimated vapor pressure compound, \\(M\\) molecular mass compound, \\(R\\) universal gas constant, \\(T\\) temperature (293.14K 20ºC).  return_calc_steps = TRUE, log estimated vapor pressure, log10_P, \\(\\textrm{log}_{10}(M/RT)\\), log_alpha, also returned.","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/calc_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate volatility estimate for a compound — calc_vol","text":"","code":"mol_paths <- mol_example() calc_vol(mol_paths) #> # A tibble: 5 × 5 #>   mol_path                                          formula name    rvi category #>   <chr>                                             <chr>   <chr> <dbl> <fct>    #> 1 /home/runner/work/_temp/Library/volcalc/extdata/… C6H12O6 D-Gl… -20.3 non-vol… #> 2 /home/runner/work/_temp/Library/volcalc/extdata/… C12H18… (-)-… -20.3 non-vol… #> 3 /home/runner/work/_temp/Library/volcalc/extdata/… C6H7Cl… beta… -20.2 non-vol… #> 4 /home/runner/work/_temp/Library/volcalc/extdata/… C12H22O Geos… -20.3 non-vol… #> 5 /home/runner/work/_temp/Library/volcalc/extdata/… C5H8    Isop… -20.8 non-vol…  # Return functional group counts from get_fx_groups() calc_vol(mol_paths,  return_fx_groups = TRUE) #> # A tibble: 5 × 51 #>   mol_path           formula name    rvi category exact_mass carbons carbons_asa #>   <chr>              <chr>   <chr> <dbl> <fct>         <dbl>   <int>       <int> #> 1 /home/runner/work… C6H12O6 D-Gl… -20.3 non-vol…      180.        6           0 #> 2 /home/runner/work… C12H18… (-)-… -20.3 non-vol…      210.       12           0 #> 3 /home/runner/work… C6H7Cl… beta… -20.2 non-vol…      270.        6           0 #> 4 /home/runner/work… C12H22O Geos… -20.3 non-vol…      182.       12           0 #> 5 /home/runner/work… C5H8    Isop… -20.8 non-vol…       68.1       5           0 #> # ℹ 43 more variables: rings_aromatic <dbl>, rings <dbl>, #> #   carbon_dbl_bonds <dbl>, CCCO_aliphatic_ring <int>, hydroxyl_groups <int>, #> #   aldehydes <int>, ketones <int>, carbox_acids <int>, ester <int>, #> #   ether <int>, ether_alicyclic <int>, ether_aromatic <int>, nitrate <int>, #> #   nitro <int>, hydroxyl_aromatic <int>, amine_primary <int>, #> #   amine_secondary <int>, amine_tertiary <int>, amine_aromatic <int>, #> #   amide_total <int>, amide_primary <int>, amide_secondary <int>, …  # Return intermediate calculations calc_vol(mol_paths, return_calc_steps = TRUE) #> # A tibble: 5 × 8 #>   mol_path       formula name    rvi category molecular_weight log_alpha log10_P #>   <chr>          <chr>   <chr> <dbl> <fct>               <dbl>     <dbl>   <dbl> #> 1 /home/runner/… C6H12O6 D-Gl… -20.3 non-vol…            180.       9.87   -30.2 #> 2 /home/runner/… C12H18… (-)-… -20.3 non-vol…            210.       9.94   -30.2 #> 3 /home/runner/… C6H7Cl… beta… -20.2 non-vol…            272.      10.1    -30.2 #> 4 /home/runner/… C12H22O Geos… -20.3 non-vol…            182.       9.88   -30.2 #> 5 /home/runner/… C5H8    Isop… -20.8 non-vol…             68.1      9.45   -30.2"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Count compound functional groups — get_fx_groups","title":"Count compound functional groups — get_fx_groups","text":"Returns functional group counts relevant calculating estimated volatility specified compounds. Users typically interact function directly, rather using calc_vol().","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count compound functional groups — get_fx_groups","text":"","code":"get_fx_groups(compound_sdf)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count compound functional groups — get_fx_groups","text":"compound_sdf ChemmineR::SDFset object returned ChemmineR::read.SDFset() ChemmineR::smiles2sdf(), example.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count compound functional groups — get_fx_groups","text":"tibble columns basic compound info functional group counts.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Count compound functional groups — get_fx_groups","text":"function currently capture following functional groups used SIMPOL.1: carbon number acid-side amide C=C-C=O non-aromatic ring alicyclic ether aromatic ether aromatic amine carbonylperoxynitrate hydroperoxide carbonylperoxyacid nitrophenol nitroesther Contributions SMARTS strings capture groups welcome.","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/get_fx_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count compound functional groups — get_fx_groups","text":"","code":"mol_path <- mol_example()[1] sdf <- ChemmineR::read.SDFset(mol_path) fx_groups <- get_fx_groups(sdf)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":null,"dir":"Reference","previous_headings":"","what":"Download compound .mol files from KEGG — get_mol_kegg","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"Downloads mol files corresponding individual compounds compounds pathway KEGG.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"","code":"get_mol_kegg(compound_ids, pathway_ids, dir, force = FALSE)"},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"compound_ids character vector KEGG compound IDs---5 digits prepended \"C\". pathway_ids character vector KEGG pathway pathway module IDs---5 digits prepended \"map\" \"M\", respectively. dir path folder save .mol files . Folder created already exist force logical; default (FALSE), .mol files downloaded found dir.  Set TRUE download overwrite existing files.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"tibble columns compound_ids, pathway_ids (used), mol_paths (paths downloaded .mol files)","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/get_mol_kegg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download compound .mol files from KEGG — get_mol_kegg","text":"","code":"if (FALSE) { get_mol_kegg(compound_ids = c(\"C16181\", \"C06074\"), dir = tempdir()) get_mol_kegg(pathway_ids = \"map00253\", dir = tempdir()) }"},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to example .mol file — mol_example","title":"Get path to example .mol file — mol_example","text":"volcalc comes bundled example .mol files inst/extdata directory.  function provides easy access .","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to example .mol file — mol_example","text":"","code":"mol_example()"},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get path to example .mol file — mol_example","text":"File names KEGG identifiers.  Compound names follows: C00031: D-Glucose C08491: (-)-Jasmonic acid C16181: beta-2,3,4,5,6-Pentachlorocyclohexanol C16286: Geosmin C16521: Isoprene","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/mol_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to example .mol file — mol_example","text":"","code":"#return paths to all example .mol files mol_example() #> [1] \"/home/runner/work/_temp/Library/volcalc/extdata/C00031.mol\" #> [2] \"/home/runner/work/_temp/Library/volcalc/extdata/C08491.mol\" #> [3] \"/home/runner/work/_temp/Library/volcalc/extdata/C16181.mol\" #> [4] \"/home/runner/work/_temp/Library/volcalc/extdata/C16286.mol\" #> [5] \"/home/runner/work/_temp/Library/volcalc/extdata/C16521.mol\"  #examine the contents of a file readLines(mol_example()[1]) #>  [1] \"D-Glucose\"                                                             #>  [2] \"\"                                                                      #>  [3] \"\"                                                                      #>  [4] \"12 12  0  0  1  0  0  0  0  0999 V2000\"                                #>  [5] \"   24.2781  -16.5372    0.0000 C   0  0  2  0  0  0  0  0  0  0  0  0\" #>  [6] \"   24.2781  -17.9377    0.0000 C   0  0  2  0  0  0  0  0  0  0  0  0\" #>  [7] \"   25.4860  -15.8370    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #>  [8] \"   23.0643  -15.8370    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\" #>  [9] \"   25.4860  -18.6379    0.0000 C   0  0  1  0  0  0  0  0  0  0  0  0\" #> [10] \"   23.0643  -18.6379    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #> [11] \"   26.7055  -16.5372    0.0000 C   0  0  3  0  0  0  0  0  0  0  0  0\" #> [12] \"   22.0023  -16.7474    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #> [13] \"   26.7055  -17.9377    0.0000 C   0  0  2  0  0  0  0  0  0  0  0  0\" #> [14] \"   25.4860  -20.0383    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #> [15] \"   27.9134  -15.8370    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #> [16] \"   27.9134  -18.6379    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\" #> [17] \"  1  2  1  0     0  0\"                                                 #> [18] \"  1  3  1  0     0  0\"                                                 #> [19] \"  1  4  1  1     0  0\"                                                 #> [20] \"  2  5  1  0     0  0\"                                                 #> [21] \"  2  6  1  6     0  0\"                                                 #> [22] \"  3  7  1  0     0  0\"                                                 #> [23] \"  4  8  1  0     0  0\"                                                 #> [24] \"  5  9  1  0     0  0\"                                                 #> [25] \"  5 10  1  1     0  0\"                                                 #> [26] \"  7 11  1  4     0  0\"                                                 #> [27] \"  9 12  1  6     0  0\"                                                 #> [28] \"  7  9  1  0     0  0\"                                                 #> [29] \"M  END\"                                                                #> [30] \"\"                                                                      #> [31] \"\""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPOL.1 method for calculating estimated volatility — simpol1","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"Implements SIMPOL.1 group contribution method predicting liquid vapor pressure organic compounds described Pankow & Asher (2008) modified version described Meredith et al. (2023).  Users usually use function directly, rather calc_vol() uses default (currently ) method.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"","code":"simpol1(fx_groups, meredith = TRUE)"},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"fx_groups data.frame tibble counts functional groups produced get_fx_groups() (manually, column names) meredith logical; FALSE: use original SIMPOL.1 method. TRUE: use modified version Meredith et al. (2023).","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"fx_groups tibble additional log10_P column","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"output includes column log10_P \\(\\textrm{log}_{10} P_{\\textrm{L},}^\\circ(T) = \\sum_k\\nu_{k,}b_k(T)\\), sum counts functional groups (\\(\\nu_{k,}\\)) times coefficients functional group (\\(b_K(T)\\)). Units log10 atmospheres. modified method Meredith et al. (2023) adds following additional functional groups coefficients: Phosphoric acid (-2.23) Phosphoric ester (-2.23) Sulfate (-2.23) Sulfonate (-2.23) Thiol (-2.23) Carbothioester (-1.20)","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"method described Pankow & Asher (2008) allows calculations logP different temperatures.  implementation currently calculates values 20ºC.","code":""},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"Pankow, J.F., Asher, W.E. 2008. SIMPOL.1: simple group contribution method predicting vapor pressures enthalpies vaporization multifunctional organic compounds. Atmos. Chem. Phys. https://doi.org/10.5194/acp-8-2773-2008 Meredith L, Ledford S, Riemer K, Geffre P, Graves K, Honeker L, LeBauer D, Tfaily M, Krechmer J. 2023. Automating methods estimating metabolite volatility. Frontiers Microbiology. https://doi.org/10.3389/fmicb.2023.1267234.","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/simpol1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SIMPOL.1 method for calculating estimated volatility — simpol1","text":"","code":"mol_path <- mol_example()[3] sdf <- ChemmineR::read.SDFset(mol_path) fx_groups <- get_fx_groups(sdf) simpol1(fx_groups) #> # A tibble: 1 × 50 #>   formula  name   exact_mass molecular_weight carbons carbons_asa rings_aromatic #>   <chr>    <chr>       <dbl>            <dbl>   <int>       <int>          <int> #> 1 C6H7Cl5O beta-…       270.             272.       6           0              0 #> # ℹ 43 more variables: rings <int>, carbon_dbl_bonds <dbl>, #> #   CCCO_aliphatic_ring <int>, hydroxyl_groups <int>, aldehydes <int>, #> #   ketones <int>, carbox_acids <int>, ester <int>, ether <int>, #> #   ether_alicyclic <int>, ether_aromatic <int>, nitrate <int>, nitro <int>, #> #   hydroxyl_aromatic <int>, amine_primary <int>, amine_secondary <int>, #> #   amine_tertiary <int>, amine_aromatic <int>, amide_total <int>, #> #   amide_primary <int>, amide_secondary <int>, amide_tertiary <int>, …"},{"path":"https://meredith-lab.github.io/volcalc/reference/volcalc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","title":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","text":"Use package calculate estimated relative volatility index values organic compounds based functional group contributions. Calculation uses SIMPOL method (Prankow Asher, 2008).","code":""},{"path":[]},{"path":"https://meredith-lab.github.io/volcalc/reference/volcalc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"volcalc: Calculate Volatility of Chemical Compounds — volcalc-package","text":"Maintainer: Kristina Riemer kristinariemer@arizona.edu (ORCID) [copyright holder] Authors: Eric R. Scott (ORCID)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-development-version","dir":"Changelog","previous_headings":"","what":"volcalc (development version)","title":"volcalc (development version)","text":"simpol1() gains argument meredith controls whether just functional groups original SIMPOL.1 method (Pankow & Asher, 2008) used additional coefficients used Meredith et al. (2023) also included. default method argument calc_vol() now renamed \"meredith\". \"simpol1\" now uses original SIMPOL.1 method without additional coefficients added Meredith et al. (2023). now possible supply input calc_vol() vector SMILES strings = \"smiles\". Users can now choose RVI thresholds non-volatile, low, moderate, high volatility clean atmosphere, polluted atmosphere, soil using environment parameter calc_vol(). Changes output get_fx_groups(): mass column renamed molecular_weight addition exact_mass column. pathway_ids argument get_mol_kegg() now also accepts pathway module IDs (e.g. “M00082”). get_mol_kegg() got significant speed improvement (#84). get_mol_kegg() skip downloading .mol file already present default (override force=TRUE). simpol1() now takes account amide functional groups. New example .mol files added. See ?mol_example(). mol_example() longer takes arguments just returns file paths example .mol files. manuscript associated volcalc now published Frontiers Microbiology 🎉. DOI: 10.3389/fmicb.2023.1267234","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-200","dir":"Changelog","previous_headings":"","what":"volcalc 2.0.0","title":"volcalc 2.0.0","text":"version includes big (breaking) changes package works! Please read changelog carefully check function documentation examples see new usage functions. Change output get_fx_groups() calc_vol() data frame tibble get_fx_groups() calc_vol() longer depend KEGG take KEGG compound IDs pathway IDs. Instead, calc_vol() accepts path .mol file input. calc_vol() vectorized accepts multiple compounds input. Moved SIMPOL.1 calculations calc_vol() function, simpol1(), pave way future expansions using methods. “manual” workflow now .mol file |> ChemmineR::read.SDFset() |> get_fx_groups() |> simpol1() output calc_vol() (simpol1()) now contains column called log10_P instead log_Sum, equivalent log_Sum + coefficient b_0(T) Output calc_vol() now contains column inputs, named whatever supplied (eg. column called mol_path containing paths mol files) new function, get_mol_kegg(), replaces save_compound_mol() downloading mol files KEGG Added pkgdown website get_fx_groups() now counts smallest set smallest rings (#57) Fixed bug caused number phenols miscounted. Rather counting phenols, get_fx_groups now counts aromatic hydroxyl groups (e.g. phenols) closely align Pankow & Asher (2008) (#46) package now hex logo! Fixes bug volcalc introduced bug-fix ChemmineR v3.53.1 (#54) volatility column output calc_vol() renamed rvi (relative volatility index)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-102","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.2","title":"volcalc 1.0.2","text":"Minor change calculation calc_vol()—remove amines functional group avoid double counting primary amines (#49)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-101","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.1","title":"volcalc 1.0.1","text":"Minor change calculation calc_vol()—use 293.15K temperature (instead 293K) match temperature used Pankow & Asher (2008)","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-100","dir":"Changelog","previous_headings":"","what":"volcalc 1.0.0","title":"volcalc 1.0.0","text":"Initial release volcalc. version code used -prep manuscript. Version 2.0.0 include breaking changes","code":""},{"path":"https://meredith-lab.github.io/volcalc/news/index.html","id":"volcalc-0009000","dir":"Changelog","previous_headings":"","what":"volcalc 0.0.0.9000","title":"volcalc 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
